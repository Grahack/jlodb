<?xml version="1.0"?>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:dct="http://purl.org/dc/terms/">

    <!-- Number a[a-z] -->

    <rdf:Description>
        <dct:identifier>a</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, sans contrainte de temps, 2 entiers compris entre 1 et 3</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=3,a=Math.floor(Math.random()*max)+1,p=1,b=(p)?Math.floor(Math.random()*max)+1:a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>b</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, sans contrainte de temps, 2 entiers compris entre 1 et 4</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=4,a=Math.floor(Math.random()*max)+1,p=1,b=(p)?Math.floor(Math.random()*max)+1:a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>c</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, sans contrainte de temps, 2 entiers compris entre 1 et 5</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=5,a=Math.floor(Math.random()*max)+1,p=Math.floor(Math.random()*10),b=(p)?Math.floor(Math.random()*max)+1:a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>d</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, sans contrainte de temps, 2 entiers compris entre 1 et 6</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=6,a=Math.floor(Math.random()*max)+1,p=Math.floor(Math.random()*6),b=(p)?Math.floor(Math.random()*max)+1:a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>e</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, sans contrainte de temps, 2 entiers compris entre 1 et 7</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=7,a=Math.floor(Math.random()*max)+1,p=Math.floor(Math.random()*5),b=(p)?Math.floor(Math.random()*max)+1:a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>f</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, sans contrainte de temps, 2 entiers compris entre 1 et 8</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=8,a=Math.floor(Math.random()*max)+1,p=Math.floor(Math.random()*4),b=(p)?Math.floor(Math.random()*max)+1:a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>g</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, sans contrainte de temps, 2 entiers compris entre 1 et 9</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=9,a=Math.floor(Math.random()*max)+1,p=Math.floor(Math.random()*4),b=(p)?Math.floor(Math.random()*max)+1:a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>h</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, sans contrainte de temps, 2 entiers compris entre 1 et 10</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=10,a=Math.floor(Math.random()*max)+1,p=Math.floor(Math.random()*4),b=(p)?Math.floor(Math.random()*max)+1:a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>3</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>i</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, en moins de 40 secondes, 2 entiers compris entre 1 et 10</dct:title>
        <dct:description><![CDATA["time":2,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=10,a=Math.floor(Math.random()*max)+1,p=Math.floor(Math.random()*4),b=(p)?Math.floor(Math.random()*max)+1:a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>4</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>j</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, en moins de 20 secondes, 2 entiers compris entre 1 et 10</dct:title>
        <dct:description><![CDATA["time":1,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=10,a=Math.floor(Math.random()*max)+1,p=Math.floor(Math.random()*4),b=(p)?Math.floor(Math.random()*max)+1:a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>5</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <!-- Number with 0: 0[a-z] -->

    <rdf:Description>
        <dct:identifier>0a</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, sans contrainte de temps, 2 entiers compris entre 0 et 3</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=4,a=Math.floor(Math.random()*max),p=1,b=(p)?Math.floor(Math.random()*max):a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>2</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>0b</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, en moins de 40 secondes, 2 entiers compris entre 0 et 3</dct:title>
        <dct:description><![CDATA["time":2,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=4,a=Math.floor(Math.random()*max),p=1,b=(p)?Math.floor(Math.random()*max):a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>2</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>0c</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, en moins de 20 secondes, 2 entiers compris entre 0 et 3</dct:title>
        <dct:description><![CDATA["time":1,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=4,a=Math.floor(Math.random()*max),p=1,b=(p)?Math.floor(Math.random()*max):a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>2</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>15a</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, en moins de 40 secondes, 2 entiers compris entre 0 et 15</dct:title>
        <dct:description><![CDATA["time":2,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=16,a=Math.floor(Math.random()*max),p=Math.floor(Math.random()*5),b=(p)?Math.floor(Math.random()*max):a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>2</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>20b</dct:alternative>
     </rdf:Description>

     <rdf:Description>
         <dct:identifier>15b</dct:identifier>
         <dct:title xml:lang="fr-FR">Comparer, en moins de 20 secondes, 2 entiers compris entre 0 et 15</dct:title>
         <dct:description><![CDATA["time":1,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=16,a=Math.floor(Math.random()*max),p=Math.floor(Math.random()*5),b=(p)?Math.floor(Math.random()*max):a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
         <dct:extent>1</dct:extent>
         <dct:subject>numeration</dct:subject>
         <dct:educationLevel>2</dct:educationLevel>
         <dct:type>3</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>20a</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, en moins de 40 secondes, 2 entiers compris entre 0 et 20</dct:title>
        <dct:description><![CDATA["time":2,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=21,a=Math.floor(Math.random()*max),p=Math.floor(Math.random()*5),b=(p)?Math.floor(Math.random()*max):a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>2</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>20b</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, en moins de 20 secondes, 2 entiers compris entre 0 et 20</dct:title>
        <dct:description><![CDATA["time":1,"len":10,"input":{"digit":1,"values":["<","=",">"]},"regexp": { "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var max=21,a=Math.floor(Math.random()*max),p=Math.floor(Math.random()*5),b=(p)?Math.floor(Math.random()*max):a; return [a+\\\"...\\\"+b, (a==b)?\\\"=\\\":((a<b)?\\\"<\\\":\\\">\\\")]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>2</dct:educationLevel>
        <dct:type>3</dct:type>
        <dct:alternative>20b</dct:alternative>
    </rdf:Description>

    <!-- 2 compares [cde][1-9][a-z] -->
    <rdf:Description>
        <dct:identifier>c10a</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, sans contrainte de temps, le nombre compris entre 2 et 9 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":1,"speed":0},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*8)+1; return [a+\\\"<...<\\\"+(a+2),(a+1)]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>e20c</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>c10b</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, en moins de 40 secondes, le nombre compris entre 2 et 9 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":2,"len":10,"input":{"digit":1,"speed":0},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*8)+1; return [a+\\\"<...<\\\"+(a+2),(a+1)]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>e20c</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>c10c</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, en moins de 20 secondes, le nombre compris entre 2 et 9 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":1,"len":10,"input":{"digit":1,"speed":0},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*8)+1; return [a+\\\"<...<\\\"+(a+2),(a+1)]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>e20c</dct:alternative>
     </rdf:Description>

    <rdf:Description>
        <dct:identifier>c20a</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, sans contrainte de temps, le nombre compris entre 1 et 19 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":2,"speed":1000},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*19); return [a+\\\"<...<\\\"+(a+2),(a+1)]}","class":"f15 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>e20c</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>c20b</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, en moins de 40 secondes, le nombre compris entre 1 et 19 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":2,"len":10,"input":{"digit":2,"speed":1000},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*19); return [a+\\\"<...<\\\"+(a+2),(a+1)]}","class":"f15 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>e20c</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>c20c</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, en moins de 20 secondes, le nombre compris entre 1 et 19 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":1,"len":10,"input":{"digit":2,"speed":1000},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*19); return [a+\\\"<...<\\\"+(a+2),(a+1)]}","class":"f15 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>e20c</dct:alternative>
     </rdf:Description>


    <rdf:Description>
        <dct:identifier>d10a</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, sans contrainte de temps, le nombre compris entre 2 et 9 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":1,"speed":0},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*8)+1; return [(a+2)+\\\">...>\\\"+a,(a+1)]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>e20c</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>d10b</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, en moins de 40 secondes, le nombre compris entre 2 et 9 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":2,"len":10,"input":{"digit":1,"speed":0},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*8)+1; return [(a+2)+\\\">...>\\\"+a,(a+1)]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>e20c</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>d10c</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, en moins de 20 secondes, le nombre compris entre 2 et 9 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":1,"len":10,"input":{"digit":1,"speed":0},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*8)+1; return [(a+2)+\\\">...>\\\"+a,(a+1)]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>e20c</dct:alternative>
     </rdf:Description>

    <rdf:Description>
        <dct:identifier>d20a</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, sans contrainte de temps, le nombre compris entre 1 et 19 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":2,"speed":1000},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*19); return [(a+2)+\\\">...>\\\"+a,(a+1)]}","class":"f15 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>e20c</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>d20b</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, en moins de 40 secondes, le nombre compris entre 1 et 19 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":2,"len":10,"input":{"digit":2,"speed":1000},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*19); return [(a+2)+\\\">...>\\\"+a,(a+1)]}","class":"f15 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>e20c</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>d20c</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, en moins de 20 secondes, le nombre compris entre 1 et 19 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":1,"len":10,"input":{"digit":2,"speed":1000},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*19); return [(a+2)+\\\">...>\\\"+a,(a+1)]}","class":"f15 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>e20c</dct:alternative>
     </rdf:Description>


    <rdf:Description>
        <dct:identifier>e10a</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, sans contrainte de temps, le nombre compris entre 2 et 9 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":1,"speed":0},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*8)+1, b=Math.floor(Math.random()*2); return [(b?((a+2)+\\\">...>\\\"+a):(a+\\\"<...<\\\"+(a+2))),(a+1)]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>e20c</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>e10b</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, en moins de 40 secondes, le nombre compris entre 2 et 9 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":2,"len":10,"input":{"digit":1,"speed":0},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*8)+1, b=Math.floor(Math.random()*2); return [(b?((a+2)+\\\">...>\\\"+a):(a+\\\"<...<\\\"+(a+2))),(a+1)]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>e20c</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>e10c</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, en moins de 20 secondes, le nombre compris entre 2 et 9 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":1,"len":10,"input":{"digit":1,"speed":0},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*8)+1, b=Math.floor(Math.random()*2); return [(b?((a+2)+\\\">...>\\\"+a):(a+\\\"<...<\\\"+(a+2))),(a+1)]}","class":"f20 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>e20c</dct:alternative>
     </rdf:Description>

    <rdf:Description>
        <dct:identifier>e20a</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, sans contrainte de temps, le nombre compris entre 1 et 19 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":2,"speed":1000},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*19), b=Math.floor(Math.random()*2); return [(b?((a+2)+\\\">...>\\\"+a):(a+\\\"<...<\\\"+(a+2))),(a+1)]}","class":"f15 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>e20c</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>e20b</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, en moins de 40 secondes, le nombre compris entre 1 et 19 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":2,"len":10,"input":{"digit":2,"speed":1000},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*19), b=Math.floor(Math.random()*2); return [(b?((a+2)+\\\">...>\\\"+a):(a+\\\"<...<\\\"+(a+2))),(a+1)]}","class":"f15 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>e20c</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>e20c</dct:identifier>
        <dct:title xml:lang="fr-FR">Trouver, en moins de 20 secondes, le nombre compris entre 1 et 19 complétant la double inégalité</dct:title>
        <dct:description><![CDATA["time":1,"len":10,"input":{"digit":2,"speed":1000},"regexp": { "output": "\\\\.\\\\.\\\\." },"gen":"function() { var a=Math.floor(Math.random()*19), b=Math.floor(Math.random()*2); return [(b?((a+2)+\\\">...>\\\"+a):(a+\\\"<...<\\\"+(a+2))),(a+1)]}","class":"f15 alpha"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>e20c</dct:alternative>
     </rdf:Description>

    <!-- Number a[a-z] -->

    <rdf:Description>
        <dct:identifier>aa</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, sans contrainte de temps, 2 entiers compris entre 1 et 2</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":1,"values":["=","&ne;"]},"regexp": { "input": { "from": "([a-z]+[0-9]+)","to":"<div class=\\\"icon\\\"><img src=\\\"res/img/svginventoryicons/vegetable/$1.svg\\\"/></div>"}, "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var v=[\\\"apple01\\\",\\\"banana01\\\",\\\"tomato01\\\",\\\"pepper01\\\",\\\"apricot01\\\",\\\"strawberry01\\\",\\\"pear01\\\",\\\"sherry01\\\",\\\"kiwi01\\\"], max=2,a=Math.floor(Math.random()*max)+1,p=Math.floor(Math.random()*3),b=(p)?Math.floor(Math.random()*max)+1:a; var ta=\\\"\\\",tb=\\\"\\\"; for (var i=0; i<a;i++) { ta+=v[Math.floor(Math.random()*v.length)]; } for (var i=0; i<b;i++) { tb+=v[Math.floor(Math.random()*v.length)]; } return [ta+\\\"<p>...</p>\\\"+tb, (a==b)?\\\"=\\\":\\\"&ne;\\\"]}","class":"f14 alpha left"]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Comparez le nombre de fruits de part et d'autre."]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>ab</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>ab</dct:identifier>
        <dct:title xml:lang="fr-FR">Comparer, sans contrainte de temps, 2 entiers compris entre 1 et 3</dct:title>
        <dct:description><![CDATA["time":0,"len":10,"input":{"digit":1,"values":["=","&ne;"]},"regexp": { "input": { "from": "([a-z]+[0-9]+)","to":"<div class=\\\"icon\\\"><img src=\\\"res/img/svginventoryicons/vegetable/$1.svg\\\"/></div>"}, "output": "\\\\.\\\\.\\\\." },"template":"template2.html","gen":"function() { var v=[\\\"apple01\\\",\\\"banana01\\\",\\\"tomato01\\\",\\\"pepper01\\\",\\\"apricot01\\\",\\\"strawberry01\\\",\\\"pear01\\\",\\\"sherry01\\\",\\\"kiwi01\\\"], max=3,a=Math.floor(Math.random()*max)+1,p=Math.floor(Math.random()*3.5),b=(p)?Math.floor(Math.random()*max)+1:a; var ta=\\\"\\\",tb=\\\"\\\"; for (var i=0; i<a;i++) { ta+=v[Math.floor(Math.random()*v.length)]; } for (var i=0; i<b;i++) { tb+=v[Math.floor(Math.random()*v.length)]; } return [ta+\\\"<p>...</p>\\\"+tb, (a==b)?\\\"=\\\":\\\"&ne;\\\"]}","class":"f10 alpha left"]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Comparez le nombre de fruits de part et d'autre."]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>1</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>ab</dct:alternative>
    </rdf:Description>

</rdf:RDF>


