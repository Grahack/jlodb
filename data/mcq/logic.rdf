<?xml version="1.0"?>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:dct="http://purl.org/dc/terms/">


    <rdf:Description>
        <dct:identifier>001</dct:identifier>
        <dct:title xml:lang="fr-FR">Appréhender l'algèbre de Boole</dct:title>
        <dct:description><![CDATA["data":[{"question":"<p>Un élément (ou un nombre) appartenant à un algèbre \\\"traditionnel\\\" peut prendre une infinité de valeurs : positive ou négative, entière ou décimale. Les éléments d'un algèbre de Boole ne peuvent prendre, quant à eux, que 2 valeurs : <b>0</b> ou <b>1</b>.</p><p>Cochez les éléments appartenant à l'algèbre de <b>Boole</b></p>", "good":["0","1"], "wrong":["3.14","-1","2","0.5"]},{"question":"<p>Selon le contexte, les propositions <b>VRAI</b> ou <b>FAUX</b> (TRUE ou FALSE en anglais) peuvent être utilisés en lieu et place de <b>1</b> et de <b>0</b></p><p>Quelles valeurs sont compatibles avec l'algèbre de Boole ?", "good":["1","VRAI","FAUX"],"wrong":["2","HELLO","3"]},{"question":"<p>L'algèbre de <b>Boole</b> propose plusieurs opérateurs que l'on nomme opérateurs booléens, opérateurs logiques, fonctions logiques ou portes logiques suivant le contexte.</p><p>La <b>négation</b> est l'une d'elles. Elle se note <b>¬</b> et inverse les valeurs logiques. C'est à dire que <b>¬(1) = 0</b> (0 est la négation de 1) et que <b>¬(0) = ...</b></p>", "good":["1"],"wrong":["0"]},{"question":"<p>Quelles sont, parmi les valeurs ci-dessous, celles qui sont équivalentes à 1 (ou VRAI) suivant l'algèbre de Boole ?</p>", "good":["1","¬(0)","¬(FAUX)"],"wrong":["0","¬(VRAI)","¬(1)"]},{"question":"<p>La négation d'une négation est l'identité, c'est à dire une opération qui ne change pas la valeur de départ.</p><p>Ainsi que vaut <b>¬(¬(VRAI))</b> ?</p>", "good":["VRAI"],"wrong":["FAUX"]},{"question":"<p>Quelles sont, parmi les valeurs ci-dessous, celles qui sont équivalentes à 1 (ou VRAI) suivant l'algèbre de Boole ?</p>", "good":["¬(0)","¬(¬(1))","¬(¬(VRAI))"],"wrong":["¬(VRAI)","¬(1)","¬(¬(0))"]}],"class":"full","question":{"format":[2,93],"font":0.6}]]></dct:description>
        <dct:extent>2</dct:extent>
        <dct:subject>logic</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>001</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>002</dct:identifier>
        <dct:title xml:lang="fr-FR">Comprendre la conjonction et la disjonction logiques</dct:title>
        <dct:description><![CDATA["data":[{"question":"<p>La <b>conjonction</b> est une opération logique de l'algèbre de Boole et se note ∧. Elle est communément appelée \\\"ET\\\".</p><p>Par définition A ∧ B = 1 si A = 1 <b>et</b> B = 1. Dans les autres cas, c'est à dire, si au moins l'une des 2 valeurs est nulles, on a A ∧ B = 0.</p><p>Combien vaut <b>1 ∧ 0</b> ?</p>", "good":["0"],"wrong":["1"]},{"question":"Sélectionnez les expressions dont la valeur vaut 1.", "good":["1 ∧ 1"],"wrong":["1 ∧ 0","0 ∧ 0","0 ∧ 1"]},{"question":"Sélectionnez les expressions dont la valeur vaut 1.", "good":["1 ∧ ¬(0)","¬(0) ∧ 1"],"wrong":["0 ∧ ¬(0)","¬(0) ∧ ¬(1)"]},{"question":"<p>Soit A une valeur de l'algèbre de Boole (on dit que A est une valeur booléenne), c'est à dire que A est une inconnue dont les valeurs possibles sont 0 ou 1, que vaut <b>A ∧ ¬(A)</b> ?</p><p>Pour que l'opération A ∧ ¬(A) donne comme résultat 1, il faudrait que les opérandes A et sa négation ¬(A) soient toutes les 2 égales à 1. Mais est-ce possible ?</p>", "good":["0"],"wrong":["1"]},{"question":"<p>La <b>disjonction</b> est une opération logique de l'algèbre de Boole et se note ∨. Elle est communément appelée \\\"OU\\\".</p><p>Par définition A ∨ B = 1 si A = 1 <b>ou</b> B = 1. A l'inverse, si les 2 valeurs A et B sont nulles, on a A ∨ B = 0.</p><p>Combien vaut <b>1 ∨ 0</b> ?</p>", "good":["1"],"wrong":["0"]},{"question":"Sélectionnez les expressions dont la valeur vaut 1.", "good":["1 ∨ 1","0 ∨ 1","1 ∨ 0"],"wrong":["0 ∨ 0"]},{"question":"<p>Soit A une valeur de l'algèbre de Boole, que vaut <b>A ∨ ¬(A)</b> ?</p>", "good":["1"],"wrong":["0"]},{"question":"Sélectionnez les expressions dont la valeur vaut 1.", "good":["¬(0) ∨ 0","¬(1) ∨ 1","¬(0) ∨ ¬(1)"],"wrong":["¬(1) ∨ 0"]},{"question":"On sait par définition que 1 ∨ 0 est égale à 1. Que vaut la valeur inverse ¬(1 ∨ 0) ?", "good":["0"],"wrong":["1"]}],"class":"full","question":{"format":[2,93],"font":0.6}]]></dct:description>
        <dct:extent>2</dct:extent>
        <dct:subject>logic</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>001</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>003</dct:identifier>
        <dct:title xml:lang="fr-FR">Comprendre la disjonction exclusive</dct:title>
        <dct:description><![CDATA["data":[{"question":"<p>La <b>disjonction exclusive</b> est une opération logique de l'algèbre de Boole et se note ⊕. Elle est communément appelée \\\"OU exclusif\\\".</p><p>Par définition A ⊕ B = 1 si A = 1 <b>ou</b> B = 1, mais <b>pas simultanément</b>. C'est à dire que, contrairement à la disjonction <b>∨</b>, si A = 1 et B = 1 alors A ⊕ B = 0.</p>", "good":["Continuer"]},{"question":"Sélectionnez les expressions dont la valeur vaut 1.", "good":["1 ⊕ 0","0 ⊕ 1"],"wrong":["1 ⊕ 1","0 ⊕ 0"]},{"question":"Sélectionnez les expressions dont la valeur vaut 1.", "good":["0 ⊕ ¬(0)","¬(0) ⊕ ¬(1)"],"wrong":["¬(0) ⊕ 1","1 ⊕ ¬(0)"]},{"question":"<p>Quelque soit la valeur A, que vaut <b>A ⊕ A</b> ?</p>", "good":["0"],"wrong":["1"]},{"question":"<p>Quelque soit la valeur A, que vaut <b>A ⊕ ¬(A)</b> ?</p>", "good":["1"],"wrong":["0"]}],"class":"full","question":{"format":[2,93],"font":0.6}]]></dct:description>
        <dct:extent>2</dct:extent>
        <dct:subject>logic</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>001</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>101</dct:identifier>
        <dct:title xml:lang="fr-FR">Comprendre les tables de vérités</dct:title>
        <dct:description><![CDATA["data":[{"question":"Une <b>table de vérité</b> est une manière de représenter le calcul logique classique.</p><p>Voici, par exemple, la table de vérité de la <b>négation ¬</b> :</p><br/><div class='cc3'><div class='c0'>A</div><div class='c0'>¬(A)</div></div><div class='cc3'><div class='c0'>0</div><div class='c1'>1</div></div><div class='cc3'><div class='c1'>1</div><div class='c0'>0</div></div><br/><p>Chaque ligne correspond à un état possible de la variable booléenne A et donne le résultat de l'opération ¬(A) en fonction de cette valeur. Que signifie la dernière ligne de la table ?</p>", "good":["¬(1) = 0"],"wrong":["A = ¬(A)","¬(0) = 0","0 = 1"]},{"question":"<p>Une table de vérité peut être utilisée pour des opérations impliquant plusieurs variables booléennes. Voici par exemple, la table de vérité d'un opérateur logique f utilisant 2 variables.</p><br/><div class='cc3'><div class='c0'>A</div><div class='c0'>B</div><div class='c0'>f(A,B)</div></div><div class='cc3'><div class='c0'>0</div><div class='c0'>0</div><div class='c0'>0</div></div><div class='cc3'><div class='c0'>0</div><div class='c1'>1</div><div class='c0'>0</div></div><div class='cc3'><div class='c1'>1</div><div class='c0'>0</div><div class='c0'>0</div></div><div class='cc3'><div class='c1'>1</div><div class='c1'>1</div><div class='c1'>1</div></div><br/><p>D'après la table de vérité, on voit que f(A,B) = 1 lorsque A = 1 et B = 1. Par conséquent, qu'est-ce que l'opérateur f ?</p>","good":["Une conjonction"],"wrong":["Une disjonction"]},{"question":"<br/><div class='cc3'><div class='c0'>A</div><div class='c0'>B</div><div class='c0'>g(A,B)</div></div><div class='cc3'><div class='c0'>0</div><div class='c0'>0</div><div class='c0'>0</div></div><div class='cc3'><div class='c0'>0</div><div class='c1'>1</div><div class='c1'>1</div></div><div class='cc3'><div class='c1'>1</div><div class='c0'>0</div><div class='c1'>1</div></div><div class='cc3'><div class='c1'>1</div><div class='c1'>1</div><div class='c0'>0</div></div><br/><p>D'après la table de vérité ci-dessus, quel symbole pourrait remplacer la fonction logique g ?</p>", "good":["⊕"],"wrong":["¬","∨","∧"]},{"question":"<br/><div class='cc3'><div class='c0'>A</div><div class='c0'>B</div><div class='c0'>h(A,B)</div></div><div class='cc3'><div class='c0'>0</div><div class='c0'>0</div><div class='c0'>0</div></div><div class='cc3'><div class='c0'>0</div><div class='c1'>1</div><div class='c1'>1</div></div><div class='cc3'><div class='c1'>1</div><div class='c0'>0</div><div class='c0'>0</div></div><div class='cc3'><div class='c1'>1</div><div class='c1'>1</div><div class='c1'>1</div></div><br/><p>D'après la table de vérité ci-dessus, que vaut h(1,0) ?</p>", "good":["0"],"wrong":["1"]},{"question":"<br/><div class='cc3'><div class='c0'>A</div><div class='c0'>B</div><div class='c0'>A∨B</div></div><div class='cc3'><div class='c0'>0</div><div class='c0'>0</div><div class='c0'>0</div></div><div class='cc3'><div class='c0'>0</div><div class='c1'>1</div><div class='c1'>1</div></div><div class='cc3'><div class='c1'>1</div><div class='c0'>0</div><div class='c1'>1</div></div><div class='cc3'><div class='c1'>1</div><div class='c1'>1</div><div class='c0' style='border:1px gray solid;'>?</div></div><br/><p>Dans la table de vérité de la <b>disjonction ∨</b>, quel est la valeur de la dernière case manquante ?</p>", "good":["1"],"wrong":["0"]}],"class":"full","question":{"format":[2,93],"font":0.5}]]></dct:description>
        <dct:extent>2</dct:extent>
        <dct:subject>logic</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>001</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>201</dct:identifier>
        <dct:title xml:lang="fr-FR">Appréhender les opérations logiques sur plusieurs digits</dct:title>
        <dct:description><![CDATA["data":[{"question":"<p>Que vaut <b>¬(1)</b> ? </p>", "good":["0"], "wrong":["1"]},{"question":"<p>Les opérations logiques, telles qu'elles ont été définies dans l'algèbre de Boole, peuvent également s'appliquer sur des nombres binaires à plusieurs chiffres. Dans ce cas, chaque chiffre est traité séparément.</p><p>Que vaut <b>¬(11)</b> ?</p>", "good":["00"],"wrong":["11"]},{"question":"<p>Que vaut <b>¬(1001)</b> ?</p>", "good":["0110"],"wrong":["1001","1100","1010"]},{"question":"<p>Il en va de même pour la conjontion et la disjonction.</p><p>Que vaut <b>01 ∨ 10</b> ?", "good":["11"],"wrong":["01","10","00"]},{"question":"<p>Que vaut <b>0011 ∧ 1001</b> ?", "good":["0001"],"wrong":["1011","1111","0010"]}],"class":"large","question":{"format":[2,93],"font":0.6}]]></dct:description>
        <dct:extent>2</dct:extent>
        <dct:subject>logic</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>001</dct:alternative>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>202</dct:identifier>
        <dct:title xml:lang="fr-FR">Appréhender les opérations logiques en hexadécimal</dct:title>
        <dct:description><![CDATA["data":[{"question":"<p>Que vaut la négation du nombre binaire 0001 codé sur 4 bits ? </p>", "good":["1110"], "wrong":["0001","1111","0000"]},{"question":"<p>Les opérations logiques peuvent s'appliquer sur des nombres binaires à plusieurs chiffres. Dans ce cas, chaque chiffre est traité séparément.</p><p>Il est alors tout à fait possible de convertir ces nombres binaires en base 16 (la base 10 n'a que peu d'intérêt dans ce cas-là). Que vaut la négation du nombre hexadécimal codé sur 1 digit 0x1 (0001 en binaire)?</p>", "good":["0xE (1110)"],"wrong":["0x1 (0001)","0xF (1111)","0x0 (0000)"]},{"question":"<p>La conjonction est très utilisée pour l'extraction de données en hexadécimal.</p><p>Soit le nombre 0xF3 dont on souhaite extraire la valeur du deuxième chiffre (0x3). Pour ce faire, on utilise le <b>masque</b> 0x0F et l'opération de conjonction. Ainsi : <b>0xF3 ∧ 0x0F = 0x03</b>. En binaire cela donne 1111 0011 ∧ 0000 1111 = 0000 0011.</p><p>Que vaut <b>0x5E ∧ 0x0F</b> ?</p>", "good":["0x0E"],"wrong":["0x0F","0x50","0x5E"]},{"question":"<p>Que vaut <b>0x5E ∧ 0xF0</b> ? </p><p>Attention, ici, le <b>masque</b> 0xF0 va masquer le chiffre des unités et extraire le premier chiffre.</p>", "good":["0x50"],"wrong":["0x0F","0x0E","0x5E"]},{"question":"<p>A l'inverse, la disjonction sert pour l'ajout de données.</p><p>Soit le nombre 0x23 dont on souhaite mettre le chiffre des unités à 0xF (sans changer l'autre chiffre). Pour ce faire, on utilise le <b>masque</b> 0x0F et l'opération de disjonction. Ainsi : <b>0x23 ∨ 0x0F = 0x2F</b>. En binaire cela donne 0010 0011 ∨ 0000 1111 = 0010 1111.</p><p>Que vaut <b>0x5E ∨ 0x0F</b> ?</p>", "good":["0x5F"],"wrong":["0x0E","0x50","0x5E"]},{"question":"<p>Que vaut <b>0x5E ∨ 0xF0</b> ? </p>", "good":["0xFE"],"wrong":["0x50","0x0E","0x5E"]}],"class":"full","question":{"format":[2,93],"font":0.6}]]></dct:description>
        <dct:extent>2</dct:extent>
        <dct:subject>logic</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>001</dct:alternative>
    </rdf:Description>

</rdf:RDF>

